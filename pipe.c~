#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <assert.h>
#include <sys/wait.h>


int pipe3(struct command *cmd) {
  int fds[2];
  int p_id = pipe(fds);
  if (p_id < 0) {
    fprintf(stderr,"Error on pipe\n");
    exit(1);
  }
  else {
    p_id = fork();
    if (p_id < 0) {
      fprintf(stderr, "Error on fork 1\n");
      exit(1);
    }
    else if (p_id == 0) {
      close(0);
      (void) dup(fds[0]);
      close(fds[1]);
      close(fds[0]);
      
      char *myargs[4];
      myargs[0] = strdup("tail");   // program: "wc" (word count)
      myargs[1] = strdup("-n"); // argument: file to count
      myargs[2] = strdup("5");
      myargs[3] = NULL;           // marks end of array
      execvp(myargs[0], myargs);  // runs word count
    } else {
      p_id = fork();
      if (p_id < 0) {
	fprintf(stderr,"Error on fork 2\n");
	exit(1);
      }
      else if (p_id == 0) {
	close(1);
	(void) dup(fds[1]);
	close(fds[1]);
	close(fds[0]);
	
	char *myargs[3];
	myargs[0] = strdup("ls");   // program: "wc" (word count)
	myargs[1] = strdup("/"); // argument: file to count
	myargs[2] = NULL;           // marks end of array
	execvp(myargs[0], myargs);  // runs word count
      }
      else {
	// parent goes down this path (original process)
        int wc = wait(NULL);
	assert(wc >= 0);
      }
    }
  }
  
}
